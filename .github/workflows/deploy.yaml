name: Build and push image to ECR, deploy new task definition to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'infrastructure/**'

env:
  AWS_IAM_ROLE_ARN_CI: ${{ secrets.AWS_IAM_ROLE_ARN_CI }}
  AWS_IAM_ROLE_ARN_DEPLOY: ${{ secrets.AWS_IAM_ROLE_ARN_DEPLOY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_REPO_NAME: ${{ secrets.IMAGE_REPO_NAME }}
  AWS_IAM_ROLE_SESSION_NAME: githubsession
  AWS_REGION: 'us-east-1'
  S3_BUCKET: 'go-api-aws-ecs-rds-tf-state-bucket'
  BASIC_AUTH_USER: ${{ secrets.BASIC_AUTH_USER }}
  BASIC_AUTH_PASSWORD: ${{ secrets.BASIC_AUTH_PASSWORD }}

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # AWS Auth
      - name: AWS Credentials for CI Account
        uses: aws-actions/configure-aws-credentials@580afbba8076b302fad6220e95a3a845f32b165a
        with:
          role-to-assume: ${{env.AWS_IAM_ROLE_ARN_CI}}
          role-session-name: ${{env.AWS_IAM_ROLE_SESSION_NAME}}
          aws-region: ${{env.AWS_REGION}}
      - name: AWS Credentials for Deployment
        uses: aws-actions/configure-aws-credentials@580afbba8076b302fad6220e95a3a845f32b165a
        with:
          aws-region: ${{env.AWS_REGION}}
          role-to-assume: ${{env.AWS_IAM_ROLE_ARN_DEPLOY}}
          role-skip-session-tagging: true
          role-chaining: true

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: major

      - uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: ${{ steps.bump-semver.outputs.new_version }}
          message: '${{ steps.bump-semver.outputs.new_version }}'

      # Build and push image to ECR
      - name: Build and push image to ECR
        run: |
          CONTAINER_IMAGE_TAG="${{ steps.bump-semver.outputs.new_version }}"

          ./.github/scripts/build_and_push_ecr.sh ${GITHUB_WORKSPACE} ${AWS_REGION} ${AWS_ACCOUNT_ID} ${IMAGE_REPO_NAME} ${CONTAINER_IMAGE_TAG}

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # AWS Auth
      - name: AWS Credentials for CI Account
        uses: aws-actions/configure-aws-credentials@580afbba8076b302fad6220e95a3a845f32b165a
        with:
          role-to-assume: ${{env.AWS_IAM_ROLE_ARN_CI}}
          role-session-name: ${{env.AWS_IAM_ROLE_SESSION_NAME}}
          aws-region: ${{env.AWS_REGION}}
      - name: AWS Credentials for Deployment
        uses: aws-actions/configure-aws-credentials@580afbba8076b302fad6220e95a3a845f32b165a
        with:
          aws-region: ${{env.AWS_REGION}}
          role-to-assume: ${{env.AWS_IAM_ROLE_ARN_DEPLOY}}
          role-skip-session-tagging: true
          role-chaining: true

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

      - name: Generate tfvars for ECS deployment
        working-directory: 'infrastructure/terraform/ecs'
        run: |
          CONTAINER_IMAGE_TAG="${{ steps.get-latest-tag.outputs.tag }}"
          CONTAINER_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$CONTAINER_IMAGE_TAG"

          echo "basic_auth_user = \"${BASIC_AUTH_USER}\"" > terraform.tfvars
          echo "basic_auth_password = \"${BASIC_AUTH_PASSWORD}\"" >> terraform.tfvars
          echo "container_image_uri = \"${CONTAINER_IMAGE_URI}\"" >> terraform.tfvars

      # Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.0'

      - name: Update VPC
        working-directory: 'infrastructure/terraform/vpc'
        run: |
          terraform init 
          terraform plan -out=tfplan -input=false
          terraform apply -auto-approve tfplan

      - name: Update DB
        working-directory: 'infrastructure/terraform/db'
        run: |
          terraform init 
          terraform plan -out=tfplan -input=false
          terraform apply -auto-approve tfplan

      - name: Update API Deployment
        working-directory: 'infrastructure/terraform/ecs'
        run: |
          terraform init 
          terraform plan -out=tfplan -input=false
          terraform apply -auto-approve tfplan
