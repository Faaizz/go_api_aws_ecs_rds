openapi: 3.0.3
info:
  title: Book Repository
  description: Book Repository Server.
  contact:
    email: fr33ziey@gmail.com
  version: 1.0.0
externalDocs:
  description: GitHub Repository
  url: https://github.com/Faaizz/go_api_aws_ecs_rds
servers:
  - url: /api/v1
tags:
  - name: book
    description: Find available books
paths:
  /healthz:
    get:
      tags:
        - healthz
      summary: Health check
      description: Health check
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
  /book:
    get:
      tags:
        - book
      summary: Find available books
      description: Returns all books from the repository
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookArrayResponse'
    post:
      tags:
        - book
      summary: Add a new book to the repository
      description: Add a new book to the repository
      requestBody:
        description: Book object that needs to be added to the repository
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '400':
          description: Bad input
        '401':
          description: Unauthorized
  /book/{ID}:
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      parameters: 
        - name: ID
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: uint64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '404':
          description: Book not found
    put:
      tags:
        - book
      summary: Update existing book
      description: Update an existing book by Id
      parameters: 
        - name: ID
          in: path
          description: ID of book to be updated
          required: true
          schema:
            type: integer
            format: uint64
      requestBody:
        description: Update an existing book in repository
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'     
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '404':
          description: Book not found
    delete:
      tags:
        - book
      summary: Delete book
      description: Delete a book by Id
      parameters: 
        - name: ID
          in: path
          description: ID of book to be deleted
          required: true
          schema:
            type: integer
            format: uint64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object 
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '404':
          description: Book not found
components:
  schemas:
    Book:
      type: object
      required:
        - title
        - author
        - year
      properties:
        title:
          type: string
          example: "Let Us C"
        author:
          type: string
          example: "Yashavant Kanetkar"
        year:
          type: integer
          format: int64
          example: 2004
    BookResponse:
      allOf:
      - type: object
        properties:
          ID:
            type: integer
            format: uint64
            example: 1
          CreatedAt:
            type: string
            format: date-time
            example: "2023-06-04T16:30:34.58148Z"
          UpdatedAt:
            type: string
            format: date-time
            example: "2023-06-04T16:30:34.58148Z"
      - $ref: '#/components/schemas/Book'
    BookArrayResponse:
      description: List of books
      type: array
      items:
        $ref: '#/components/schemas/BookResponse'
